from pymongo import MongoClient
import datetime

# --- Configuration ---
MONGO_URI = "mongodb://localhost:28910"  # Update if needed
DB = "wifi_data_db_indoor"
ORIGINAL_COLLECTION = "wifi_indoor_data_1"
NEW_COLLECTION = "wifi_indoor_data_1_corrected"

# --- Connect to MongoDB ---
client = MongoClient(MONGO_URI)
original_col = client[DB][ORIGINAL_COLLECTION]
new_col = client[DB][NEW_COLLECTION]

# --- Date range for 14/07/2025 (Unix timestamps) ---
start_ts = 1752105600  # 2025-07-14 00:00:00
end_ts = 1752191999    # 2025-07-14 23:59:59

# --- Load all documents ---
all_docs = list(original_col.find({}))

# --- Process and write to new collection ---
for doc in all_docs:
    doc.pop("_id", None)  # Properly remove the _id key

    metadata = doc.get("metadata", {})
    ip = metadata.get("pico_ip")
    x = metadata.get("x")
    y = metadata.get("y")
    triangle_shape = metadata.get("triangle_shape")
    ts = doc.get("timestamp", 0)

    # Apply corrections only for July 14, 2025
    if start_ts <= ts <= end_ts:
        if ip == "10.20.1.115" and x == 5 and y == 3:
            metadata["x"] = 4
            metadata["y"] = 3
        elif ip == "10.20.1.116" and x == 4 and y == 3:
            metadata["x"] = 5
            metadata["y"] = 3
        elif ip == "10.20.1.118" and triangle_shape == "reto_grande":
            metadata["x"] = 5
            metadata["y"] = 4

    new_col.insert_one(doc)

print(f"✅ All data copied and corrected in '{DB}.{NEW_COLLECTION}'")


from pymongo import MongoClient


collections_to_use = [
    "wifi_indoor_data",
    "wifi_indoor_data_1_corrected",
    "wifi_indoor_data_2"
]

new_collection_name = "wifi_data_indoor_global"
new_collection = db[new_collection_name]
new_collection.drop()  # Start clean to avoid duplicates

# === Target update parameters ===
target_shape = "reto_grande"
target_ip = "10.20.0.118"
old_coords = {"x": 5, "y": 4}
new_coords = {"x": 4, "y": 5}

# === Stats counters ===
total_read = 0
total_modified = 0
total_written = 0

for col_name in collections_to_use:
    collection = db[col_name]
    documents = list(collection.find({}))
    total_read += len(documents)

    for doc in documents:
        updated = False
        metadata = doc.get("metadata", {})

        if (
            metadata.get("triangle_shape") == target_shape and
            metadata.get("pico_ip") == target_ip and
            metadata.get("x") == old_coords["x"] and
            metadata.get("y") == old_coords["y"]
        ):
            doc["metadata"]["x"] = new_coords["x"]
            doc["metadata"]["y"] = new_coords["y"]
            updated = True

        if updated:
            total_modified += 1

        new_collection.insert_one(doc)
        total_written += 1

# === Summary ===
print(f"✅ Total documents read from original collections: {total_read}")
print(f"✅ Total documents modified (x=5,y=4 → x=4,y=5): {total_modified}")
print(f"✅ Total documents written to new collection '{new_collection_name}': {total_written}")
